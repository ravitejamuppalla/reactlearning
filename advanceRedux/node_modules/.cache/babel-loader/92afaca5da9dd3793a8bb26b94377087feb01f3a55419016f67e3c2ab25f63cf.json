{"ast":null,"code":"import { createSlice, configureStore, current } from \"@reduxjs/toolkit\";\nlet intialValuesItems = {\n  items: [],\n  toggleCart: false,\n  notification: null,\n  changed: true\n};\nlet cartSlice = createSlice({\n  name: \"cart\",\n  initialState: intialValuesItems,\n  reducers: {\n    responseData(state, action) {\n      state.items = action.payload;\n    },\n    addItem(state, action) {\n      state.changed = true;\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          count: 1,\n          name: newItem.title\n        });\n      } else {\n        existingItem.count++;\n      }\n    },\n    removeItems(state, action) {\n      let removeelement = action.payload;\n      const existingItem = state.items.find(item => item.id === removeelement.id);\n      if (existingItem) {\n        if (!(existingItem.count === 1)) existingItem.count--;else state.items = state.items.filter(values => !(values.id == removeelement.id));\n      }\n    },\n    toggleCart(state) {\n      state.toggleCart = true;\n    },\n    notificationFucntion(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nlet storeCart = configureStore({\n  reducer: {\n    cartItem: cartSlice.reducer\n  }\n});\nexport let cartActions = cartSlice.actions;\nexport default storeCart;","map":{"version":3,"names":["createSlice","configureStore","current","intialValuesItems","items","toggleCart","notification","changed","cartSlice","name","initialState","reducers","responseData","state","action","payload","addItem","newItem","existingItem","find","item","id","push","price","count","title","removeItems","removeelement","filter","values","notificationFucntion","status","message","storeCart","reducer","cartItem","cartActions","actions"],"sources":["C:/Users/Ravi_Teja_Muppala/Documents/GitUdemyReactJs/reactlearning/advanceRedux/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore, current } from \"@reduxjs/toolkit\";\r\n\r\nlet intialValuesItems = {\r\n  items: [],\r\n  toggleCart: false,\r\n  notification: null,\r\n  changed: true,\r\n};\r\nlet cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: intialValuesItems,\r\n  reducers: {\r\n    responseData(state, action) {\r\n      state.items = action.payload;\r\n    },\r\n    addItem(state, action) {\r\n      state.changed = true;\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          count: 1,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.count++;\r\n      }\r\n    },\r\n    removeItems(state, action) {\r\n      let removeelement = action.payload;\r\n      const existingItem = state.items.find(\r\n        (item) => item.id === removeelement.id\r\n      );\r\n\r\n      if (existingItem) {\r\n        if (!(existingItem.count === 1)) existingItem.count--;\r\n        else\r\n          state.items = state.items.filter(\r\n            (values) => !(values.id == removeelement.id)\r\n          );\r\n      }\r\n    },\r\n    toggleCart(state) {\r\n      state.toggleCart = true;\r\n    },\r\n\r\n    notificationFucntion(state, action) {\r\n      state.notification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nlet storeCart = configureStore({ reducer: { cartItem: cartSlice.reducer } });\r\n\r\nexport let cartActions = cartSlice.actions;\r\nexport default storeCart;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,EAAEC,OAAO,QAAQ,kBAAkB;AAEvE,IAAIC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,KAAK;EACjBC,YAAY,EAAE,IAAI;EAClBC,OAAO,EAAE;AACX,CAAC;AACD,IAAIC,SAAS,GAAGR,WAAW,CAAC;EAC1BS,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEP,iBAAiB;EAC/BQ,QAAQ,EAAE;IACRC,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC1BD,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDC,OAAOA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACN,OAAO,GAAG,IAAI;MACpB,MAAMU,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B,MAAMG,YAAY,GAAGL,KAAK,CAACT,KAAK,CAACe,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACvE,IAAI,CAACH,YAAY,EAAE;QACjBL,KAAK,CAACT,KAAK,CAACkB,IAAI,CAAC;UACfD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBC,KAAK,EAAE,CAAC;UACRf,IAAI,EAAEQ,OAAO,CAACQ;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLP,YAAY,CAACM,KAAK,EAAE;MACtB;IACF,CAAC;IACDE,WAAWA,CAACb,KAAK,EAAEC,MAAM,EAAE;MACzB,IAAIa,aAAa,GAAGb,MAAM,CAACC,OAAO;MAClC,MAAMG,YAAY,GAAGL,KAAK,CAACT,KAAK,CAACe,IAAI,CAClCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKM,aAAa,CAACN,EACtC,CAAC;MAED,IAAIH,YAAY,EAAE;QAChB,IAAI,EAAEA,YAAY,CAACM,KAAK,KAAK,CAAC,CAAC,EAAEN,YAAY,CAACM,KAAK,EAAE,CAAC,KAEpDX,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAACwB,MAAM,CAC7BC,MAAM,IAAK,EAAEA,MAAM,CAACR,EAAE,IAAIM,aAAa,CAACN,EAAE,CAC7C,CAAC;MACL;IACF,CAAC;IACDhB,UAAUA,CAACQ,KAAK,EAAE;MAChBA,KAAK,CAACR,UAAU,GAAG,IAAI;IACzB,CAAC;IAEDyB,oBAAoBA,CAACjB,KAAK,EAAEC,MAAM,EAAE;MAClCD,KAAK,CAACP,YAAY,GAAG;QACnByB,MAAM,EAAEjB,MAAM,CAACC,OAAO,CAACgB,MAAM;QAC7BN,KAAK,EAAEX,MAAM,CAACC,OAAO,CAACU,KAAK;QAC3BO,OAAO,EAAElB,MAAM,CAACC,OAAO,CAACiB;MAC1B,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,IAAIC,SAAS,GAAGhC,cAAc,CAAC;EAAEiC,OAAO,EAAE;IAAEC,QAAQ,EAAE3B,SAAS,CAAC0B;EAAQ;AAAE,CAAC,CAAC;AAE5E,OAAO,IAAIE,WAAW,GAAG5B,SAAS,CAAC6B,OAAO;AAC1C,eAAeJ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}